//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Frog"",
            ""id"": ""95aee581-733c-491d-b55e-cad36717fe1c"",
            ""actions"": [
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""e9b1a186-0762-4128-ba4c-fed0007c7e5d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tongue"",
                    ""type"": ""Value"",
                    ""id"": ""96b454a9-6aef-4eb1-9fb9-af933d3fa66f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b4fb9c11-a05f-424d-a82f-a666e0333f30"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""797db26e-95c3-480c-b1c5-a563ec3f319f"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tongue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Frog
        m_Frog = asset.FindActionMap("Frog", throwIfNotFound: true);
        m_Frog_Aim = m_Frog.FindAction("Aim", throwIfNotFound: true);
        m_Frog_Tongue = m_Frog.FindAction("Tongue", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_Frog.enabled, "This will cause a leak and performance issues, PlayerInput.Frog.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Frog
    private readonly InputActionMap m_Frog;
    private List<IFrogActions> m_FrogActionsCallbackInterfaces = new List<IFrogActions>();
    private readonly InputAction m_Frog_Aim;
    private readonly InputAction m_Frog_Tongue;
    public struct FrogActions
    {
        private @PlayerInput m_Wrapper;
        public FrogActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Aim => m_Wrapper.m_Frog_Aim;
        public InputAction @Tongue => m_Wrapper.m_Frog_Tongue;
        public InputActionMap Get() { return m_Wrapper.m_Frog; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FrogActions set) { return set.Get(); }
        public void AddCallbacks(IFrogActions instance)
        {
            if (instance == null || m_Wrapper.m_FrogActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FrogActionsCallbackInterfaces.Add(instance);
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Tongue.started += instance.OnTongue;
            @Tongue.performed += instance.OnTongue;
            @Tongue.canceled += instance.OnTongue;
        }

        private void UnregisterCallbacks(IFrogActions instance)
        {
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Tongue.started -= instance.OnTongue;
            @Tongue.performed -= instance.OnTongue;
            @Tongue.canceled -= instance.OnTongue;
        }

        public void RemoveCallbacks(IFrogActions instance)
        {
            if (m_Wrapper.m_FrogActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFrogActions instance)
        {
            foreach (var item in m_Wrapper.m_FrogActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FrogActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FrogActions @Frog => new FrogActions(this);
    public interface IFrogActions
    {
        void OnAim(InputAction.CallbackContext context);
        void OnTongue(InputAction.CallbackContext context);
    }
}
